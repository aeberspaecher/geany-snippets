# Geany's snippets configuration file
# use \n or %newline% for a new line (it will be replaced by the used EOL char(s) - LF, CR/LF, CR)
# use \t ot %ws% for an indentation step, if using only spaces for indentation only spaces will be used
# use \s to force whitespace at beginning or end of a value ('key= value' won't work, use 'key=\svalue')
# use %cursor% to define where the cursor should be placed after completion
# use %key% for all keys defined in the [Special] section
# you can define a section for each supported filetype to overwrite default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names' for a full list
#
# Additionally, you can use most of the template wildcards like {developer} or {date} in the snippets.
# See the documentation for details.

# filetype names:
# ASM, C, C++, C#, CAML, D, Fortran, FreeBasic, Haskell, Haxe, Java, Pascal, VHDL, Ferite, Javascript,
# Lua, Make, O-Matrix, Perl, PHP, Python, Ruby, Sh, Tcl, CSS, Docbook, HTML, XML, Conf, Diff, LaTeX,
# reStructuredText, SQL, None


[Special]
wordchars=._abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

[Fortran]
line=!-----------------------------------------------------------------------
dim=dimension(%cursor%)
dp=double precision
dc=double complex
func=function %cursor%()\n\timplicit none\nend function
sub=subroutine %cursor%()\n\timplicit none\nend subroutine
do=do %cursor%\n\t\nend do
int=integer
real=real(dp)
prog=program %cursor%\n\t\nend program
if=if(%cursor%) then\n\t\nendif
imp=implicit none
mod=module %cursor%\n\t\nend module

[Python]
line=#-----------------------------------------------------------------------
for=for i in xrange(%cursor%):\n\t
doc=""" %cursor% """\n
elif=elif %cursor%:\n\t
else=else:\n\t%cursor%
if=if %cursor%:\n\t
from=from %cursor% import \n
main=if __name__ == '__main__':\n\t%cursor%
class=class %cursor%(object):\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass
def=def %cursor%(self):\n\t""" Function doc\n\n\t@param PARAM: DESCRIPTION\n\t@return RETURN: DESCRIPTION\n\t"""\n\t
get=def get%cursor%(self): return self._var\n
set=def set%cursor%(self): self._var = var\n
.=self.%cursor%
try=try:\n\t%cursor%\nexcept Exception, e:\n\t
py=#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\n%cursor%
while=while %cursor%:\n\t
with=with %cursor%:\n\t
head="""\n\t%cursor%PROJECT - MODULE\n\n\tDESCRIPTION\n\n\t@copyright: {year} by {developer} <{mail}>\n\t@license: GNU GPL, see COPYING for details.\n"""\n

[LaTeX]
#misc
includegraph=\\includegraphics[]{%cursor%}
#structure stuff
line=%-----------------------------------------------------------------------
chapter=\\chapter{%cursor%}\\label{chap:}
section=\\section{%cursor%}\\label{sec:}
subsection=\\subsection{%cursor%}\\label{subsec:}
subsubsection=\\subsubsection{%cursor%}\\label{subsubsec:}
# environments
itemize=\\begin{itemize}\n%ws%\\item %cursor%\n\\end{itemize}
enumerate=\\begin{enumerate}\n%ws%\\item %cursor%\n\\end{enumerate}
description=\\begin{description}\n%ws%\\item %cursor%\n\\end{description}
figure=\\begin{figure}\n\t\\centering\n\t\includegraphics[]{%cursor%}\n\t\\caption{}\n\t\label{fig:}\n\\end{figure}
table=\\begin{table}\n\\centering\n\\begin{tabular}[]{%cursor%}\n\\toprule\n\t\n\\midrule\n\t\n\\bottomrule\n\\end{tabular}\n\\caption{}\n\\label{tab:}\n\end{table}
center=\\begin{center}\n\t%cursor%\n\\end{center}
#beamer stuff
frame=\\begin{frame}{%cursor%}\n\n\\end{frame}
block=\\begin{block}{%cursor%}\n%cursor%\n\\end{block}
exbox=\\begin{exbox}{%cursor%}\n\n\\end{exbox}
bbox=\\begin{bbox}{%cursor%}\n\n\\end{bbox}
alertbbox=\\begin{alertbbox}{%cursor%}\n\n\\end{alertbbox}
# math stuff
align=\\begin{align}\n%cursor%\n\\end{align}
equation=\\begin{equation}\n%cursor%\n\\end{equation}
eqnarray=\\begin{eqnarray}\n%cursor%\n\\end{eqnarray}

[reStructuredText]
#"header":
rst=.. role:: raw-math(raw)\n\t:format: latex html\n%cursor%
eq=:raw-math:`%cursor%`
